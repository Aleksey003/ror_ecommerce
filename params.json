{"body":"#ROR Ecommerce\r\n\r\n##Project Overview\r\n\r\nPlease create a ticket on github if you have issues.\r\nThey will be addressed ASAP.\r\n\r\nPlease look at the [homepage](http://www.ror-e.com) for more details.\r\n\r\n![RoR Ecommerce](http://ror-e.com/images/logo.png \"ROR Ecommerce\").\r\n\r\nThis is a Rails e-commerce platform.\r\nROR Ecommerce is a *Rails 3 application* with the intent to allow developers to create an ecommerce solution easily.\r\nThis solution includes an Admin for *Purchase Orders*, *Product creation*, *Shipments*, *Fulfillment* and *creating Orders*.\r\nThere is a minimal customer facing shopping cart understanding that this will be customized.\r\nThe cart allows you to track your customers' *cart history* and includes a *double entry accounting system*.\r\n\r\nThe project has *Solr searching*, *Compass* and *Blueprint for CSS* and uses *jQuery*.\r\nThe gem list is quite large and the project still has a large wish list.\r\nIn spite of that, it is currently the most complete Rails solution, and it will only get better.\r\n\r\nPlease use *Ruby 1.9.3* and enjoy *Rails 3.2*.\r\n\r\nROR Ecommerce is designed so that if you understand Rails you will understand ROR_ecommerce.\r\nThere is nothing in this project besides what you might see in a normal Rails application.\r\nIf you don't like something, you are free to just change it like you would in any other Rails app.\r\n\r\nContributors are welcome!\r\nWe will always need help with UI, documentation, and code, so feel free to pitch in.\r\nTo get started, simply fork this repo, make *any* changes (big or small), and create a pull request.\r\n\r\n##DEMO\r\n\r\nTake a look at [The Demo](https://ror-e.herokuapp.com).\r\nThe login name is test@ror-e.com with a password => test123\r\n\r\n##Getting Started\r\n\r\nPlease feel free to ask/answer questions in our [Google Group](http://groups.google.com/group/ror_ecommerce).\r\n\r\nInstall RVM with Ruby 1.9.3.\r\nIf you have 1.9.3 on your system you're good to go.\r\nPlease refer to the [RVM](http://beginrescueend.com/rvm/basics/) site for more details.\r\n\r\nCopy the `database.yml` for your setup.\r\nFor SQLite3, `cp config/database.yml.sqlite3 config/database.yml`.\r\nFor MySQL, `cp config/database.yml.mysql config/database.yml` and update your username/password.\r\n\r\nIf you are using the mysql dmg file to install mysql you will need to edit your ~/.bash_profile and include this:\r\n\r\n  export DYLD_LIBRARY_PATH=/usr/local/mysql/lib:$DYLD_LIBRARY_PATH\r\n\r\nRun `rake secret` and copy/paste the output as `encryption_key` in `config/config.yml`.\r\n\r\n    gem install bundler\r\n    bundle install\r\n    rake db:create:all\r\n    rake db:migrate db:seed\r\n    rake db:test:prepare\r\n\r\nOnce everything is set up, start the server with `rails server` and direct your web browser to [localhost:3000/admin/overviews](http://localhost:3000/admin/overviews).\r\nWrite down the username/password (these are only shown once) and follow the directions.\r\n\r\n## Environmental Variables\r\n\r\nMost users are using Amazon S3 or Heroku.\r\nThus we have decided to have a setup easy to get your site up and running as quickly as possible\r\nin this production environment.  Hence you should add the following ENV variables:\r\n\r\n    FOG_DIRECTORY     => your bucket on AWS\r\n    AWS_ACCESS_KEY_ID => your access key on AWS\r\n    AWS_ACCESS_KEY_ID => your secret key on AWS\r\n    AUTHNET_LOGIN     => if you use authorize.net otherwise change config/settings.yml && config/environments/*.rb\r\n    AUTHNET_PASSWORD  => if you use authorize.net otherwise change config/settings.yml && config/environments/*.rb\r\n\r\nOn linux:\r\n\r\n    export FOG_DIRECTORY=xxxxxxxxxxxxxxx\r\n    export AWS_ACCESS_KEY_ID=xxxxxxxxxxxxxxx\r\n    export AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n    export AUTHNET_LOGIN=xxxxxxxxxxx\r\n    export AUTHNET_PASSWORD=xxxxxxxxxxxxxxx\r\n\r\nOn Heroku:\r\n\r\n    heroku config:add FOG_DIRECTORY=xxxxxxxxxxxxxxx\r\n    heroku config:add AWS_ACCESS_KEY_ID=xxxxxxxxxxxxxxx\r\n    heroku config:add AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n    heroku config:add AUTHNET_LOGIN=xxxxxxxxxxx\r\n    heroku config:add AUTHNET_PASSWORD=xxxxxxxxxxxxxxx\r\n\r\n    heroku labs:enable user-env-compile -a myapp\r\n\r\nThis is needed for using sendgrid on heroku(config/initializers/mail.rb):\r\n\r\n    heroku config:add SENDGRID_USERNAME=xxxxxxxxxxx\r\n    heroku config:add SENDGRID_PASSWORD=xxxxxxxxxxxxxxx\r\n\r\n\r\n##Quick Evaluation\r\n\r\nIf you just want to see what ror_ecommerce looks like, before you enter any products into the database, run the following command:\r\n\r\n    rake db:seed_fake\r\n\r\nYou should now have a minimal dataset, and be able to see a demo of the various parts of the app.\r\nNote: make sure you have `config/settings.yml` set up correctly before you try to checkout.\r\nAlso, please take a look at [The 15 minute e-commerce video](http://www.ror-e.com/info/videos/7).\r\n\r\n##ImageMagick and rMagick on OS X 10.8\r\n------------------------------------\r\n\r\nIf installing rMagick on OS X 10.8 and using Homebrew to install ImageMagick, you will need to symlink across some files or rMagick will not be able to build.\r\n\r\nDo the following in the case of a Homebrew installed ImageMagick(and homebrew had issues):\r\n\r\n    * cd /usr/local/Cellar/imagemagick/6.8.0-10/lib\r\n    * ln -s libMagick++-Q16.7.dylib   libMagick++.dylib\r\n    * ln -s libMagickCore-Q16.7.dylib libMagickCore.dylib\r\n    * ln -s libMagickWand-Q16.7.dylib libMagickWand.dylib\r\n\r\n##YARDOCS\r\n\r\nIf you would like to read the docs, you can generate them with the following command:\r\n\r\n    yardoc --no-private --protected app/models/*.rb\r\n\r\n####Payment Gateways\r\n\r\nFirst, create `config/settings.yml` and change the encryption key and paypal/auth.net information.\r\nYou can also change `config/settings.yml.example` to `config/settings.yml` until you get your real info.\r\n\r\nTo change from authlogic to any other gateway go to\r\n\r\n## Paperclip\r\n\r\nPaperclip will throw errors if not configured correctly.\r\nYou will need to find out where Imagemagick is installed.\r\nType: `which identify` in the terminal and set\r\n\r\n```ruby\r\nPaperclip.options[:command_path]\r\n```\r\n\r\nequal to that path in `config/paperclip.rb`.\r\n\r\nExample:\r\n\r\nChange:\r\n\r\n```ruby\r\nPaperclip.options[:command_path] = \"/usr/local/bin\"\r\n```\r\n\r\nInto:\r\n\r\n```ruby\r\nPaperclip.options[:command_path] = \"/usr/bin\"\r\n```\r\n\r\n##Adding Dalli For Cache and the Session Store\r\n\r\nWhile optional, for a speedy site, using memcached is a good idea.\r\n\r\nInstall memcached.\r\nIf you're on a Mac, the easiest way to install Memcached is to use [homebrew](http://mxcl.github.com/homebrew/):\r\n\r\n    brew install memcached\r\n\r\n    memcached -vv\r\n\r\n####To Turn On the Dalli Cookie Store\r\n\r\nRemove the cookie store on line one of `config/initializers/session_store.rb`.\r\nIn your Gemfile add:\r\n\r\n```ruby\r\ngem 'dalli'\r\n```\r\n\r\nthen:\r\n\r\n    bundle install\r\n\r\nFinally uncomment the next two lines in `config/initializers/session_store.rb`\r\n\r\n```ruby\r\nrequire 'action_dispatch/middleware/session/dalli_store'\r\nHadean::Application.config.session_store :dalli_store, :key => '_hadean_session_ugrdr6765745ce4vy'\r\n```\r\n\r\n####To Turn On the Dalli Cache Store\r\n\r\nIt is also recommended to change the cache store in config/environments/*.rb\r\n\r\n```ruby\r\nconfig.cache_store = :dalli_store\r\n```\r\n\r\n## Adding Solr Search\r\n\r\n    brew install solr\r\n\r\nUncomment the following in your gemfile:\r\n\r\n```ruby\r\n#gem 'sunspot_solr'\r\n#gem 'sunspot_rails', '~> 1.3'\r\n```\r\n\r\nthen:\r\n\r\n    bundle install\r\n\r\nStart Solr before starting your server:\r\n\r\n    rake sunspot:solr:start\r\n\r\nGo to the bottom of `product.rb` and uncomment:\r\n\r\n```ruby\r\nProduct.class_eval\r\n```\r\n\r\nTake a look at setting up Solr - [Solr in 5 minutes](http://github.com/outoftime/sunspot/wiki/adding-sunspot-search-to-rails-in-5-minutes-or-less)\r\n\r\nIf you get the error, `Errno::ECONNREFUSED (Connection refused - connect(2)):` when you try to create a product or upload an image, you have not started Solr search.\r\nYou need to run `rake sunspot:solr:start`, or remove Solr completely.\r\n\r\n##TODO:\r\n\r\n* more documentation / videos for creating products/variants\r\n* create referral programs so users can earn store credits\r\n\r\n##Author\r\n\r\nRoR Ecommerce was created by David Henner. [Contributors](https://github.com/drhenner/ror_ecommerce/blob/master/Contributors.md).\r\n\r\n##FYI:\r\n\r\nShipping categories are categories based off price:\r\n\r\nyou might have two shipping categories (light items) & (heavy items)\r\n\r\nHave fun!!!\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Ror ecommerce","tagline":"Complete Ruby on Rails Ecommerce platform"}